logicalV <- V > T
sum(logicalV)
}
n.BIG.2(c(27, 89, 96), 50)
# 6. square.root function
square.root <- function(S) {
while(x)
}
# 1. logical indexing and mean
age   <- c(25, 30, 22, 40, 33, 24)
sex   <- c("M", "F", "M", "F", "U", "U")
males <- sex == "M"
females <- sex == "F"
unspec <- sex == "U"
males.meanAge <- mean(age[males])
females.meanAge <- mean(age[females])
unspec.meanAge <- mean(age[unspec])
# 2. logical test of vector
A <- c(1,10,2,9,3,8,4,7,5,6)
subA <- A > 5
A[subA]
# 3. matrix manipulation
mat <- matrix(c(1,7,9,5,8,1,8,9,4,5,6,9), ncol = 4, nrow = 3)
mat[2,3] <- 100
mat[,3]
# 4. n.BIG.1 function
n.BIG.1 <- function(V, T) {
totalV <- 0
for(v in V){
if(v > T){
totalV <- totalV + 1
}
}
return(totalV)
}
n.BIG.1(c(27,89,96),50)
# 5. n.BIG.2 function
n.BIG.2 <- function(V, T){
logicalV <- V > T
sum(logicalV)
}
n.BIG.2(c(27, 89, 96), 50)
# 6. square.root function
square.root <- function(S) {
}
rm(list = ls())
# 1. logical indexing and mean
age   <- c(25, 30, 22, 40, 33, 24)
sex   <- c("M", "F", "M", "F", "U", "U")
males <- sex == "M"
females <- sex == "F"
unspec <- sex == "U"
males.meanAge <- mean(age[males])
females.meanAge <- mean(age[females])
unspec.meanAge <- mean(age[unspec])
# 2. logical test of vector
A <- c(1,10,2,9,3,8,4,7,5,6)
subA <- A > 5
A[subA]
# 3. matrix manipulation
mat <- matrix(c(1,7,9,5,8,1,8,9,4,5,6,9), ncol = 4, nrow = 3)
mat[2,3] <- 100
mat[,3]
# 4. n.BIG.1 function
n.BIG.1 <- function(V, T) {
totalV <- 0
for(v in V){
if(v > T){
totalV <- totalV + 1
}
}
return(totalV)
}
n.BIG.1(c(27,89,96),50)
# 5. n.BIG.2 function
n.BIG.2 <- function(V, T){
logicalV <- V > T
sum(logicalV)
}
n.BIG.2(c(27, 89, 96), 50)
# 6. square.root function
square.root <- function(S) {
}
View(mat)
## Solution to Ex. 6
square.root <- function(S) {
x <- S / 2
while(S/x*x > 0.0000001){
x <- (x + S /x)/2
}
return(x)
}
square.root(100)
## Solution to Ex. 6
square.root <- function(S) {
x <- S / 2
while(S-x*x > 0.0000001){
x <- (x + S /x)/2
}
return(x)
}
square.root(100)
square.root(100)
## Solution to Ex. 6
square.root <- function(S) {
x <- S / 2
while(S-x*x > 0.0000001){
x <- (x + S / x)/2
}
return(x)
}
square.root(100)
## Solution to Ex. 6
square.root <- function(S) {
x <- S / 2
while(S-x/x > 0.0000001){
x <- (x + S / x)/2
}
return(x)
}
square.root(100)
## Solution to Ex. 6
square.root <- function(S) {
x <- S / 2
while(x*x - S > 0.0000001){
x <- (x + S / x)/2
}
return(x)
}
square.root(100)
square.root(50)
square.root(25)
square.root(250)
square.root(256)
square.root(32000)
square.root(256)
square.root(412)
square.root(411)
square.root(400)
square.root(411)
square.root(440)
square.root(442)
square.root(441)
square.root(100)
rm(list = ls())
rm(ls())
?rm()
rm(list=ls())
library(tidyverse);
library(tidyverse);
wd()
log <- read_csv('Documents/2019/Uni/info 305/milestone1/1minute_flat-up-sensorLog.csv')
View(log)
?read_csv
log <- read_csv('Documents/2019/Uni/info 305/milestone1/1minute_flat-up-sensorLog.csv', col_names = v('sensor', 'time', 'X', 'Y', 'Z'))
log <- read_csv('Documents/2019/Uni/info 305/milestone1/1minute_flat-up-sensorLog.csv', col_names = c('sensor', 'time', 'X', 'Y', 'Z'))
View(log)
?filter
gyro <- filter(log, sensor == "Gyroscope")
View(gyro)
ucgyro <- filter(log, sensor == "UCGyroscope")
View(ucgyro)
View(log)
View(log)
?geom
??geom
?ggplot()
ggplot(data = gyro, aes(x = 'time', y = c('X', 'Y', 'Z'))
ggplot(data = gyro, aes(x = 'time', y = c('X', 'Y', 'Z'), color=c('red', 'yellow', 'green'))
ggplot(data = gyro, aes(x = 'time', y = c('X', 'Y', 'Z'), color=c('red', 'yellow', 'green')))
ggplot(data = gyro, aes(x = 'time', y = 'X', color=c('red', 'yellow', 'green')))
ggplot(data = gyro, aes(x = 'time', y = 'X', color= 'red')
ggplot(data = gyro, aes(x = 'time', y = 'X', color= 'red'))
ggplot(data = gyro, aes(x = 'time', y = 'X', color= 'red'))
geom_point(data = gyro, aes(x = 'time', y = 'X', color= 'red'))
View(gyro)
View(gyro)
ggplot(data = gyro) +
gg_point(x = "time", y="x")
ggplot(data = gyro) +
geom_point(x = "time", y="x")
ggplot(data = gyro) +
geom_point(x = "time", y="x")
ggplot(data = gyro, x='time') +
geom_line(y="x", color = red)
ggplot(data = gyro, x='time') +
geom_line(y="x", color = 'red')
ggplot(data = gyro, x='time') +
geom_line(y="x", col = 'Y')
ggplot(data = gyro, x='time') +
geom_line(x= 'time', y="x")
ggplot(data = gyro) +
geom_line(x= 'time', y="x")
ggplot(data = gyro, x='time') +
geom_line(x= 'sensor', y="x")
?geom_line
ggplot(data = gyro, x='time') +
geom_line(stat="x")
ggplot(data = gyro, x='time') +
geom_line(stat="X")
ggplot(data = gyro, x='time') +
geom_line(stat="X", col='X')
ggplot(data = gyro, x='time') +
geom_line() col='X')
ggplot(data = gyro, x='time') +
geom_line(col='X')
ggplot(data = gyro, x='time') +
geom_line(X='time',y='X')
ggplot(data = gyro, x='time') +
geom_line(x='time',y='X')
ggplot(data = gyro, aes('sensor', 'X')) +
geom_line(x='time',y='X')
ggplot(gyro, aes(time, Y, colour = variable)) +
geom_line()
ggplot(gyro, aes(time, X)) + geom_line()
ggplot(gyro, aes(time, X)) + geom_line()
ggplot(gyro, aes(time, Y, colour = variable)) +
geom_point()
ggplot(gyro, aes(time, X)) + geom_line()
ggplot(gyro, aes(time, X)) + geom_point()
ggplot(gyro, aes('time', Y, colour = variable)) +
geom_point()
ggplot(gyro, aes('time', X)) + geom_point()
ggplot(gyro, aes('time', 'Y', colour = variable)) +
geom_point()
ggplot(gyro, aes('time', 'X')) + geom_point()
ggplot(gyro, aes('time', 'X')) + geom_point()
library(tidyverse)
library(ggplot2)
library(tidyr)
setwd("~/Documents/GitHub/info305_mile2/processingData/")
sr16ws16 <- read_csv("acc_1566962884533SR60WS256.0.csv")
#remove samplenumber & Magnitude
noSRorMag <-  sr16ws16[-(1:2)]
#standing calibration
standing <- noSRorMag[]
standing.mean <- as_data_frame(colMeans(standing[-1]))
standing.mean.tall <- standing.mean %>% gather()
standing.mean.total <- colMeans(standing.mean.tall)
#walking data
walking <- noSRorMag[]
walking.mean <- as_tibble(colMeans(walking[-1]))
walking.mean.tall <- walking.mean %>% gather()
walking.mean.total <- colMeans(walking.mean.tall)
walking.range <- range(walking[2:15])
ggplot() +
geom_line(data =walking.mean.tall, aes(x=seq(1:255), y=abs(value)))
View(walking.mean.tall)
sr16ws16 <- read_csv("acc_1566963020078SR60WS32.0.csv")
mTest <- as_data_frame(colMeans(sr16ws16))
# remove
rangeTest <- range(sr16ws16[[10]])
#remove samplenumber & Magnitude
noSRorMag <-  sr16ws16[-(1:2)]
#standing calibration
standing <- noSRorMag[]
standing.mean <- as_data_frame(colMeans(standing[-1]))
standing.mean.tall <- standing.mean %>% gather()
standing.mean.total <- colMeans(standing.mean.tall)
#walking data
walking <- noSRorMag[]
walking.mean <- as_tibble(colMeans(walking[-1]))
walking.mean.tall <- walking.mean %>% gather()
walking.mean.total <- colMeans(walking.mean.tall)
walking.range <- range(walking[2:15])
ggplot() +
geom_line(data =walking.mean.tall, aes(x=seq(1:255), y=abs(value)))
ggplot() +
geom_line(data =walking.mean.tall, aes(x=seq(1:31), y=abs(value)))
#################
# final results #
#################
#standing finals
standing <- read_csv("acc_standing.csv")
standing <- standing(-(1:2))
standing.mean <- as_data_frame(colMeans(standing[-1]))
standing.mean.tall <- standing.mean %>% gather()
standing.mean.total <- colMeans(standing.mean.tall)
list = ls()
rm(list = ls())
#################
# final results #
#################
#standing finals
standing <- read_csv("acc_standing.csv")
standing <- standing(-(1:2))
View(standing)
standing <- standing[-(1:2)]
standing.mean <- as_data_frame(colMeans(standing[-1]))
standing.mean.tall <- standing.mean %>% gather()
standing.mean.total <- colMeans(standing.mean.tall)
#walking finals
walking <- read_csv("acc_walking.csv")
walking <- walking[-(1:2)]
walking.mean <- as_tibble(colMeans(walking[-1]))
walking.mean.tall <- walking.mean %>% gather()
walking.mean.total <- colMeans(walking.mean.tall)
#jogging finals
jogging <- read_csv("acc_jogging")
jogging <- jogging[-(1:2)]
jogging.mean <- as_tibble(colMeans(jogging[-1]))
jogging.mean.tall <- jogging.mean %>% gather()
jogging.mean.total <- colMeans(jogging.mean.tall)
#jogging finals
jogging <- read_csv("acc_jogging")
#jogging finals
jogging <- read_csv("acc_jogging.csv")
jogging <- jogging[-(1:2)]
jogging.mean <- as_tibble(colMeans(jogging[-1]))
jogging.mean.tall <- jogging.mean %>% gather()
jogging.mean.total <- colMeans(jogging.mean.tall)
ggplot() +
geom_line(data =walking.mean.tall, aes(x=seq(1:63), y=abs(value)))
ggplot() +
geom_line(data =walking.mean.tall, aes(x=seq(1:63), y=value)) +
####################
mTest <- as_data_frame(colMeans(sr16ws16))
ggplot() +
geom_line(data =walking.mean.tall, aes(x=seq(1:63), y=value)) +
####################
mTest <- as_data_frame(colMeans(sr16ws16))
ggplot() +
geom_line(data =walking.mean.tall, aes(x=seq(1:63), y=value))
ggplot() +
geom_line(data = standing.mean.tall, aes(x=seq(1:63), y=value), color = 'red') +
geom_line(data = walking.mean.tall, aes(x=seq(1:63), y=value), color = 'blue') +
geom_line(data = jogging.mean.tall, aes(x=seq(1:63), y=value), color = 'green')
ggplot(aes(color = data)) +
geom_line(data = standing.mean.tall, aes(x=seq(1:63), y=value), color = 'red') +
geom_line(data = walking.mean.tall, aes(x=seq(1:63), y=value), color = 'blue') +
geom_line(data = jogging.mean.tall, aes(x=seq(1:63), y=value), color = 'green')
ggplot(aes(x=seq(1:63))) +
geom_line(data = standing.mean.tall, aes(x=seq(1:63), y=value), color = 'red') +
geom_line(data = walking.mean.tall, aes(x=seq(1:63), y=value), color = 'blue') +
geom_line(data = jogging.mean.tall, aes(x=seq(1:63), y=value), color = 'green')
ggplot(aes(x=seq(1:63))) +
geom_line(data = standing.mean.tall, aes(x=seq(1:63), y=value), color = 'red') +
geom_line(data = walking.mean.tall, aes(x=seq(1:63), y=value), color = 'blue') +
geom_line(data = jogging.mean.tall, aes(x=seq(1:63), y=value), color = 'green')
ggplot() +
geom_line(data = standing.mean.tall, aes(x=seq(1:63), y=value), color = 'red') +
geom_line(data = walking.mean.tall, aes(x=seq(1:63), y=value), color = 'blue') +
geom_line(data = jogging.mean.tall, aes(x=seq(1:63), y=value), color = 'green')
ggplot() +
geom_line(data = standing.mean.tall, aes(x=seq(1:63), y=abs(value)), color = 'red') +
geom_line(data = walking.mean.tall, aes(x=seq(1:63), y=abs(value)), color = 'blue') +
geom_line(data = jogging.mean.tall, aes(x=seq(1:63), y=BS(value)), color = 'green')
ggplot() +
geom_line(data = standing.mean.tall, aes(x=seq(1:63), y=abs(value)), color = 'red') +
geom_line(data = walking.mean.tall, aes(x=seq(1:63), y=abs(value)), color = 'blue') +
geom_line(data = jogging.mean.tall, aes(x=seq(1:63), y=abs(value)), color = 'green')
ggplot() +
geom_line(data = standing.mean.tall, aes(x=seq(1:63), y=abs(value)), color = 'red') +
geom_line(data = walking.mean.tall, aes(x=seq(1:63), y=abs(value)), color = 'blue') +
geom_line(data = jogging.mean.tall, aes(x=seq(1:63), y=abs(value)), color = 'green') +
scale_x_discrete("frequency bin", seq(1:63))
ggplot() +
geom_line(data = standing.mean.tall, aes(x=seq(1:63), y=abs(value)), color = 'red') +
geom_line(data = walking.mean.tall, aes(x=seq(1:63), y=abs(value)), color = 'blue') +
geom_line(data = jogging.mean.tall, aes(x=seq(1:63), y=abs(value)), color = 'green') +
scale_x_continuous("frequency bin", seq(1:63))
View(walking.mean)
View(standing.mean)
View(standing.mean)
View(walking.mean.tall)
View(jogging.mean.tall)
#########################
# min max plot for all? range? sd?
minMaxStand <- min(standing.mean.tall)
#########################
# min max plot for all? range? sd?
minMaxStand <- min(abs(standing.mean.tall))
#########################
# min max plot for all? range? sd?
minStand <- min(abs(standing.mean.tall))
#########################
# min max plot for all? range? sd?
minStand <- min(abs(standing))
standing.range <- range(standing[32])
standing.range <- range(abs(standing[32])
standing.range <- range(abs(standing[32]) )
standing.range <- range((abs(standing[32])))
walking.range <- range(abs(walking[32]))
walking.range <- range(abs(walking[32]))
standing.range <- range(abs(standing[32]))
jogging.range <- range(abs(jogging[32]))
standing.range <- as_tibble(range(abs(standing[1:64])))
View(standing.range)
standing.range <- as_tibble(range(abs(standing)))
View(standing.range)
View(standing)
standing.range <- as_tibble(range(abs(standing[])))
View(standing.range)
standing.range <- as_tibble(range(abs(standing[1:64])))
standing.tall <- standing %>% gather();
View(standing.tall)
standing.range <- as_tibble(range(abs(standing[1:64])))
View(standing.range)
standing.range <- as_tibble(range(abs(standing[1])))
View(standing.range)
standing.range <- as_tibble(range(abs(standing[2])))
standing.range <- as_tibble(apply(standing, 2))
standing.range <- as_tibble(apply(standing, 2), range())
standing.range <- as_tibble(apply(standing, 2, range()))
standing.range <- as_tibble(apply(standing, 2, range)
)
standing.range <- as_tibble(apply(standing, 2, range))
View(standing.range)
standing.range <- as_tibble(apply(standing.tall, 2, range))
View(standing.tall)
View(standing.range)
standing.range <- as_tibble(apply(standing, 2, range)) %>% gather()
View(standing.range)
standing.range <- as_tibble(apply(standing, 2, abs(range)) %>% gather()
standing.range <- as_tibble(apply(standing, 2, abs(range))) %>% gather()
standing.abs <- apply(standing, 2, abs)
standing.range <- as_tibble(apply(standing, 2, range)) %>% gather()
standing.range <- as_tibble(apply(standing.abs, 2, range)) %>% gather()
View(standing.range)
View(standing.abs)
walking <- apply(walking, 2, abs)
walking.range <- as_tibble(apply(walking.abs, 2, range)) %>% gather()
walking.abs <- apply(walking, 2, abs)
walking.range <- as_tibble(apply(walking.abs, 2, range)) %>% gather()
jogging.abs <- apply(jogging, 2, abs)
jogging.range <- as_tibble(apply(jogging.abs, 2, range)) %>% gather()
ggplot() +
geom_point(data = standing.range, aes(x=seq(1:63), y=abs(value)), color = 'red') +
geom_point(data = walking.range, aes(x=seq(1:63), y=abs(value)), color = 'blue') +
geom_point(data = jogging.range, aes(x=seq(1:63), y=abs(value)), color = 'green') +
scale_x_continuous("frequency bin", seq(1:63))
ggplot() +
geom_point(data = standing.range, aes(x=seq(1:128), y=abs(value)), color = 'red') +
geom_point(data = walking.range, aes(x=seq(1:128), y=abs(value)), color = 'blue') +
geom_point(data = jogging.range, aes(x=seq(1:128), y=abs(value)), color = 'green') +
scale_x_continuous("frequency bin", seq(1:63))
ggplot() +
geom_point(data = standing.range[-1:2], aes(x=seq(1:128), y=abs(value)), color = 'red') +
geom_point(data = walking.range[-1:2], aes(x=seq(1:128), y=abs(value)), color = 'blue') +
geom_point(data = jogging.range[-1:2], aes(x=seq(1:128), y=abs(value)), color = 'green') +
scale_x_continuous("frequency bin", seq(1:63))
ggplot() +
geom_point(data = standing.range[-(1:2)], aes(x=seq(1:128), y=abs(value)), color = 'red') +
geom_point(data = walking.range[-(1:2)], aes(x=seq(1:128), y=abs(value)), color = 'blue') +
geom_point(data = jogging.range[-(1:2)], aes(x=seq(1:128), y=abs(value)), color = 'green') +
scale_x_continuous("frequency bin", seq(1:63))
ggplot() +
geom_point(data = standing.range[-(1:2)], aes(x=seq(1:126), y=abs(value)), color = 'red') +
geom_point(data = walking.range[-(1:2)], aes(x=seq(1:126), y=abs(value)), color = 'blue') +
geom_point(data = jogging.range[-(1:2)], aes(x=seq(1:126), y=abs(value)), color = 'green') +
scale_x_continuous("frequency bin", seq(1:63))
ggplot() +
geom_point(data = standing.range, aes(x=seq(1:128), y=abs(value)), color = 'red') +
geom_point(data = walking.range, aes(x=seq(1:128), y=abs(value)), color = 'blue') +
geom_point(data = jogging.range, aes(x=seq(1:128), y=abs(value)), color = 'green') +
scale_x_continuous("frequency bin", seq(1:63))
standing.abs <- apply(standing[-(1)], 2, abs)
standing.range <- as_tibble(apply(standing.abs, 2, range)) %>% gather()
View(standing.range)
walking.abs <- apply(walking[-(1)], 2, abs)
walking.range <- as_tibble(apply(walking.abs, 2, range)) %>% gather()
jogging.abs <- apply(jogging[-(1])], 2, abs)
jogging.abs <- apply(jogging[-(1)], 2, abs)
jogging.range <- as_tibble(apply(jogging.abs, 2, range)) %>% gather()
standing.abs <- apply(standing[-(1)], 2, abs)
standing.range <- as_tibble(apply(standing.abs, 2, range)) %>% gather()
ggplot() +
geom_point(data = standing.range, aes(x=seq(1:128), y=abs(value)), color = 'red') +
geom_point(data = walking.range, aes(x=seq(1:128), y=abs(value)), color = 'blue') +
geom_point(data = jogging.range, aes(x=seq(1:128), y=abs(value)), color = 'green') +
scale_x_continuous("frequency bin", seq(1:63))
ggplot() +
geom_point(data = standing.range, aes(x=seq(1:126), y=abs(value)), color = 'red') +
geom_point(data = walking.range, aes(x=seq(1:126), y=abs(value)), color = 'blue') +
geom_point(data = jogging.range, aes(x=seq(1:126), y=abs(value)), color = 'green') +
scale_x_continuous("frequency bin", seq(1:63))
ggplot() +
geom_point(data = standing.range, aes(x=seq(1:128), y=abs(value)), color = 'red') +
geom_point(data = walking.range, aes(x=seq(1:128), y=abs(value)), color = 'blue') +
geom_point(data = jogging.range, aes(x=seq(1:128), y=abs(value)), color = 'green') +
scale_x_continuous("frequency bin", seq(1:63))
ggplot() +
geom_point(data = standing.range, aes(x=seq(1:127), y=abs(value)), color = 'red') +
geom_point(data = walking.range, aes(x=seq(1:127), y=abs(value)), color = 'blue') +
geom_point(data = jogging.range, aes(x=seq(1:127), y=abs(value)), color = 'green') +
scale_x_continuous("frequency bin", seq(1:63))
ggplot() +
geom_point(data = standing.range, aes(x=seq(1:126), y=abs(value)), color = 'red') +
geom_point(data = walking.range, aes(x=seq(1:126), y=abs(value)), color = 'blue') +
geom_point(data = jogging.range, aes(x=seq(1:126), y=abs(value)), color = 'green') +
scale_x_continuous("frequency bin", seq(1:63))
View(walking.range)
walking.abs <- apply(walking[-(1)], 2, abs)
walking.range <- as_tibble(apply(walking.abs, 2, range)) %>% gather()
walking.abs <- apply(walking[-(1:2)], 2, abs)
walking.range <- as_tibble(apply(walking.abs, 2, range)) %>% gather()
#walking finals
walking <- read_csv("acc_walking.csv")
walking <- walking[-(1:2)]
walking.mean <- as_tibble(colMeans(walking[-1]))
walking.mean.tall <- walking.mean %>% gather()
walking.mean.total <- colMeans(walking.mean.tall)
#walking finals
walking <- read_csv("acc_walking.csv")
walking <- walking[-(1:2)]
walking.abs <- apply(walking[-(1)], 2, abs)
walking.range <- as_tibble(apply(walking.abs, 2, range)) %>% gather()
ggplot() +
geom_point(data = standing.range, aes(x=seq(1:126), y=abs(value)), color = 'red') +
geom_point(data = walking.range, aes(x=seq(1:126), y=abs(value)), color = 'blue') +
geom_point(data = jogging.range, aes(x=seq(1:126), y=abs(value)), color = 'green') +
scale_x_continuous("frequency bin", seq(1:63))
